/**
 * 
 */
package replicatorg.model;

import java.io.BufferedReader;
import java.io.IOException;
import java.util.Iterator;

/**
 * @author rob
 *
 */
public class BuildQueueGCodeSource implements GCodeSource {

	/** Iterates over the source files (individual GCode files) of the build queue */
	private final Iterator<BufferedReader> sourceFileIterator;

	/** Iterates over the gcode lines generated by appending each file in the 
	 * build queue */
	private final BuildQueueSourceIterator iterator = new BuildQueueSourceIterator();

	/** The currently selected gcode source file in the build queue */
	private BufferedReader currentSource;

	/**
	 * @param iterator 
	 * 
	 */
	public BuildQueueGCodeSource(Iterator<BufferedReader> sourceFileIterator) {
		this.sourceFileIterator = sourceFileIterator;
		this.currentSource = this.sourceFileIterator.next();
	}

	/* (non-Javadoc)
	 * @see replicatorg.model.GCodeSource#iterator()
	 */
	@Override
	public Iterator<String> iterator() {
		return iterator;
	}

	/* (non-Javadoc)
	 * @see replicatorg.model.GCodeSource#getLineCount()
	 */
	@Override
	public int getLineCount() {
		// TODO Auto-generated method stub
		return Integer.MAX_VALUE;
	}

	class BuildQueueSourceIterator implements Iterator<String>
	{

		@Override
		public boolean hasNext() {
			return updateSource();
		}
		
		/**
		 * 
		 * returns true if the iterator has more lines (returns hasNext() == true).
		 */
		private boolean updateSource() {
			/* test if the file end is reached */
			boolean fileEndReached = true;
			try {
				fileEndReached = !currentSource.ready();
			} catch (IOException e) {
				// IOException, lets just kill this.
				e.printStackTrace();
				return false;
			} catch (NullPointerException e2) {
				// NullPointerException, lets just kill this.
				e2.printStackTrace();
				return false;
			}
			/* file is still open; file end is not reached yet */
			if (!fileEndReached) return true;
			/* file end is reached open the next file */
			else if (fileEndReached && sourceFileIterator.hasNext()==true)
			{
				//update the source file and return true
				currentSource = sourceFileIterator.next();
				return true;
			}
			/* file is end is reached and there are no more files */
			else
			{
				return false;
			}
		}

		@Override
		public String next() {
			if (!updateSource()) return "";
			try {
				return currentSource.readLine();
			} catch (IOException e) {
				return "";
			} catch (NullPointerException e2) {
				return "";
			}
		}

		@Override
		public void remove() {
			/* 
			 * Nothing to do here.. umm.. so how's the coffee at your place?
			 * [code monkey waves]
			 */
		}
		
	}
}
